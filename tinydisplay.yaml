esphome:
  name: esp32-c3
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:
api:
ota:
  - platform: esphome
    password: !secret ota_password


mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_user
  password: !secret mqtt_password
  id: mqtt_client

  on_message:
    - topic: dsmr/reading/electricity_currently_delivered
      then:
        - lambda: |-
            id(oled_text) = x.c_str();
            id(my_display).update();

web_server:
  port: 80

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf


# LCD bus I2C
i2c:
  sda: GPIO5
  scl: GPIO6
  scan: true
  id: bus_a
  frequency: 800kHz

# Display settings
display:
  - platform: ssd1306_i2c
    model: "sh1106 128x64"
    id: my_display
    rotation: 0
    update_interval: 15s  
    offset_y: 0
    offset_x: 0
    invert: false
    address: 0x3C
    lambda: |-
      it.printf(35, 33, id(nerd), "%s", id(oled_text).c_str());
      it.printf(35, 43, id(nerd), "%6.3f", id(boiler_power).state);

# Font
font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 12
  - file: fonts/JetBrainsMono-Light.ttf
    id: nerd
    size: 14
 
sensor:
  - platform: homeassistant
    id: boiler_power
    entity_id: sensor.stekker1_power
    internal: false

  - platform: homeassistant
    id: boiler_energy
    entity_id: sensor.stekker1_energy
    internal: false

text_sensor:
  - platform: homeassistant
    name: "oledtext"
    entity_id: input_text.oledtext
    id: oledtext
    on_value:
      then:
        - component.update: my_display

globals:
  - id: oled_text
    type: std::string
    restore_value: no
    initial_value: '"Wait..."'
